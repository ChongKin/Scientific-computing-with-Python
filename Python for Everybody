Intro A: Why program?
  Users vs. Programmers
  - Users see computers as a set of tooles - word processor, spreadsheet, map, to-do list etc
  - Prgrammers learn the computer "ways" and the computer language
  - Programmers have some tools that allow them to build new tools
  - Programmers sometimes write tools for lots of users and sometimes programeers write little "helpers" for themselve to automate a task.
  
  Computer (Hardware + Software)
  - From a software creator's point of view, we build the software. The end users (stakeholders/actors) are our masters - who we want to please - odten they pay us money when they are pleased. But the data, information, and networks are our problem to solve on their behalf. The hardware and software are our friends and allies in this quest.

  What is Code? Software? A Program?
  - A sequence of stored instructions
    - It's a little piece of out intelligence in the computer
    - We figure something out and then we encode it and then give it to someone else to save them the time and energy of figuring it out
   - A piece of creative art - particularly when we do a good job on user experience.

Intro B: Hardware Architecture
  Central Processing Unit (CPU): Runs the program - The CPU is always wondering "what to do next". Not the brains exactly - very dumb but very very fast.
  Input Devices: Keyboard, Mouse, Touch Screen
  Output Devices: Screen, Speakers, Printer, DVD Burner
  Main Memory: Fast small temporary storage - list on reboot - aka RAM
  Secondary Memory: Slower large permanenet storage - lasts until deleted - disk drive / memory stick
  
Intro C: Python as a Language
  - Early Learner: Syntax Errors
    - We need to learn the Python language so we can communicate our instructions to Python. In the beginning we will make lots of mistakes and speak gibberish like small children
 
Intro D: Elements of Python
  - Elements of Python
    - Vocabulary / Words - Variables and Reserved words (Chapter 2)
    - Sentence Structure - valid syntax patterns (Chapters 3-5)
    - Story structure - constructing a program for a purpose

  - Reserved Words
    - You cannot use reserved words as variables names / identifiers
       False class return is finally None if for lambda continue True def from while nonlocal
       and del global not with as elif try or yield assert else import pass break except in raise
  
  - Sentences or Lines
    - X = 2     <--- Assignment statement
    - X = X + 2 <--- Assignment with expression
    - Print(x)  <--- Print statement
        * X               : variable (something we decide)
        * = / +           : Operator
        * 2 (or numeric)  : Constant
        * Print           : Reserved Word
        
  - Python Scripts
    - Interactive Python is good for experiments and programs of 3-4 lines long.
    - Most programs are much longer, so we type them into a file and tell Python to run the commands in the file.
    - In a sense, we are "giving Python a script".
    - As a convention, we add ".py" as the suffix on the end of these files to inficate they contain Python.
    
  - Interactive versus Script
    - Interactive
        * You type directly to Python one line at a time and it responds
    - Script
        * You enter a sequence of statements (lines) into a file using a text editor and tell Python to execute the statements in the file
        
  - Program Steps or Program Flow
    - Like a recipe or installation instructions, a program is a sequence of steps to be done in order.
    - Some steps are conditional - they may be skipped.
    - Sometimes a step or group of steps is to be repeated.
    - Sometimes we store a set of steps to be used over and over as needed several places throughout the program (Chapter 4)
    
   - Sequential steps
      x = 2           
        |                     Program:          Output:
      print (x)               
        |                     x = 2
      x = x + 2               print (x) ----->    2
        |                     x = x + 2
      print (x)               print (x) ----->    4   
   
      When a program is running, it flows from one step to the next. As programmers, we set up "paths" for the program to follow.
     
   - Conditional Steps
      x = 5
        |
      x < 10 ? -------> Yes               Program:                Output:
         |               |
         |         print('Smaller')       x = 5
         |<--------------|                if x < 10:
      x > 20 ? -----------                    print ('Smaller')   Samller
   No    |                |               id x > 20:
         |         print('Bigger')             print ('Bigger')
         |----------------|
      print('Fins')                       Print ('Fins')           Finis
      
    - Repeated Steps
              n = 5                         Program:              Output: 
                |                           n = 5                     5
    No -------n > 0------- Yes              while n > 0:              4
     |          |           |                   print (n)             3
     |          |         print(n)              n = n - 1             2
     |          |           |                                         1
     |          |        n = n - 1          print('Blastoff')  ----> Blastoff!
     |          |___________|                
     |__________                        Loops (repeated steps) have interation variablest hat change each time through a loop.
                |
           print('Blastoff')
